name: Build wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    name: ${{ matrix.os }}, Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-15-intel]
        python: [cp39, cp310, cp311, cp312, cp313, cp314]
    env:
      BUILD_COMMIT: "main"  # main or a specific version, e.g., v1.23.0
      PYPI_UPLOAD: false  # true or false
      TESTPYPI_UPLOAD: false
      CIBW_BUILD: ${{ matrix.python }}-*
      CIBW_ARCHS_LINUX: "x86_64 aarch64"
      CIBW_ARCHS_MACOS: auto
      CIBW_ARCHS_WINDOWS: AMD64
      # No support for pypy, musl, Win32 for 3.10+
      # No win32 support due to segfaults
      CIBW_SKIP: "pp* cp39-musllinux* *musllinux_aarch64*"
      CIBW_TEST_COMMAND: python -c "import randomgen; randomgen.test(['-m','(not slow)'])"
      # Avoid testing on emulated architectures
      CIBW_TEST_SKIP: "*-*linux_{aarch64,ppc64le,s390x} *-win32"
      CIBW_REPAIR_WHEEL_COMMAND_LINUX: 'auditwheel repair --strip -w {dest_dir} {wheel}'
      MKL_NUM_THREADS: 1
      OMP_NUM_THREADS: 1
      OPENLAS_NUM_THREADS: 1

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2
        with:
          output-dir: wheelhouse
          package-dir: randomgen
        env:
          CIBW_BEFORE_BUILD: 'git submodule foreach git checkout  ${{ env.BUILD_COMMIT }}'
          CIBW_BEFORE_TEST: python install-pytest.py
          CIBW_TEST_REQUIRES: pytest
          PYTHON_VALUE: '${{ matrix.python }}'

      - name: Show whels
        run: |
          echo "Show wheelhouse contents"
          ls ./wheelhouse

      - name: Upload wheels
        if: always()
        run: source twine-upload.sh
        env:
          TESTPYPI_TOKEN: ${{ secrets.TESTPYPI_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
